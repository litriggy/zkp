// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

library Pairing {
    struct G1Point {
        uint256 X;
        uint256 Y;
    }
    struct G2Point {
        uint256[2] X;
        uint256[2] Y;
    }

    function P1() internal pure returns (G1Point memory) {
        return G1Point(1, 2);
    }

    function negate(G1Point memory p) internal pure returns (G1Point memory) {
        if (p.X == 0 && p.Y == 0) {
            return G1Point(0, 0);
        }
        return G1Point(p.X, pmod(-int256(p.Y)));
    }

    function pmod(int256 x) private pure returns (uint256) {
        uint256 q = 21888242871839275222246405745257275088548364400416034343698204186575808495617;
        int256 xx = x % int256(q);
        if (xx < 0) {
            xx += int256(q);
        }
        return uint256(xx);
    }

    function add(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {
        uint256[4] memory input;
        input[0] = p1.X;
        input[1] = p1.Y;
        input[2] = p2.X;
        input[3] = p2.Y;
        bool success;
        assembly {
            success := staticcall(gas(), 6, input, 0x80, r, 0x40)
        }
        require(success, "pairing-add failed");
    }

    function scalar_mul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {
        uint256[3] memory input;
        input[0] = p.X;
        input[1] = p.Y;
        input[2] = s;
        bool success;
        assembly {
            success := staticcall(gas(), 7, input, 0x60, r, 0x40)
        }
        require(success, "pairing-mul failed");
    }

    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) {
        require(p1.length == p2.length, "pairing-length");
        uint256 elements = p1.length;
        uint256 inputSize = elements * 6;
        uint256[] memory input = new uint256[](inputSize);
        for (uint256 i = 0; i < elements; i++) {
            uint256 j = i * 6;
            input[j + 0] = p1[i].X;
            input[j + 1] = p1[i].Y;
            input[j + 2] = p2[i].X[0];
            input[j + 3] = p2[i].X[1];
            input[j + 4] = p2[i].Y[0];
            input[j + 5] = p2[i].Y[1];
        }
        uint256[1] memory out;
        bool success;
        assembly {
            success := staticcall(gas(), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)
        }
        require(success, "pairing-op failed");
        return out[0] != 0;
    }

    function pairingProd4(
        G1Point memory a1,
        G2Point memory a2,
        G1Point memory b1,
        G2Point memory b2,
        G1Point memory c1,
        G2Point memory c2,
        G1Point memory d1,
        G2Point memory d2
    ) internal view returns (bool) {
        G1Point[] memory p1 = new G1Point[](4);
        G2Point[] memory p2 = new G2Point[](4);
        p1[0] = a1;
        p1[1] = b1;
        p1[2] = c1;
        p1[3] = d1;
        p2[0] = a2;
        p2[1] = b2;
        p2[2] = c2;
        p2[3] = d2;
        return pairing(p1, p2);
    }
}

contract AggregatedMembershipVerifier {
    using Pairing for *;

    struct VerifyingKey {
        Pairing.G1Point alfa1;
        Pairing.G2Point beta2;
        Pairing.G2Point gamma2;
        Pairing.G2Point delta2;
        Pairing.G1Point[] IC;
    }

    struct Proof {
        Pairing.G1Point A;
        Pairing.G2Point B;
        Pairing.G1Point C;
    }

    VerifyingKey internal vk;

    constructor() {
        vk.alfa1 = Pairing.G1Point(
            0,
            0
        );
        vk.beta2 = Pairing.G2Point(
            [uint256(0), uint256(0)],
            [uint256(0), uint256(0)]
        );
        vk.gamma2 = Pairing.G2Point(
            [uint256(0), uint256(0)],
            [uint256(0), uint256(0)]
        );
        vk.delta2 = Pairing.G2Point(
            [uint256(0), uint256(0)],
            [uint256(0), uint256(0)]
        );
        vk.IC = new Pairing.G1Point[](3);
        vk.IC[0] = Pairing.G1Point(0, 0);
        vk.IC[1] = Pairing.G1Point(0, 0);
        vk.IC[2] = Pairing.G1Point(0, 0);
        // TODO: Replace the zeroed verifying key with the values generated by snarkjs for the
        // AggregatedMembership circuit instantiation that you deploy. Leaving zeros will make every
        // verification fail.
    }

    function verifyingKey() internal view returns (VerifyingKey memory) {
        return vk;
    }

    function verify(uint256[] memory input, Proof memory proof) internal view returns (bool) {
        VerifyingKey memory vkMem = verifyingKey();
        require(input.length + 1 == vkMem.IC.length, "bad-input-length");
        Pairing.G1Point memory vkX = Pairing.G1Point(0, 0);
        vkX = Pairing.add(vkX, vkMem.IC[0]);
        for (uint256 i = 0; i < input.length; i++) {
            vkX = Pairing.add(vkX, Pairing.scalar_mul(vkMem.IC[i + 1], input[i]));
        }
        if (!Pairing.pairingProd4(
            Pairing.negate(proof.A),
            proof.B,
            vkMem.alfa1,
            vkMem.beta2,
            vkX,
            vkMem.gamma2,
            proof.C,
            vkMem.delta2
        )) {
            return false;
        }
        return true;
    }

    function verifyAggregatedMembership(
        Proof memory proof,
        uint256 root,
        uint256 aggregateCommitment
    ) external view returns (bool) {
        uint256[] memory inputValues = new uint256[](2);
        inputValues[0] = root;
        inputValues[1] = aggregateCommitment;
        return verify(inputValues, proof);
    }
}
